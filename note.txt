command = ""
started = False

while True:
    command = input("> ")
    if command.lower() == "start":
        if started:
            print('The car is already started')
        else:
            started = True
            print("Car started...")
    elif command.lower() == 'help':
        print("""
start - to start the car
stop - to stop the car
quit - to quit
        """)
    elif command.lower() == 'stop':
        if not started:
            print('The car is already stopped')
        else:
            started = True
            print('Car stopped...')
    elif command.lower() == 'quit':
        break
    else:
        print("Sorry, I don't understand that!")


numbers = [5, 2, 5, 2, 2]
for x_count in numbers:
    output = ''
    for count in range(x_count):
        output += 'x'
    print(output)


numbers = [3, 6, 2, 8, 4, 10]
max = numbers[0]

for x in numbers:
    if x > max:
        max = x

print(max)



matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

for row in matrix:
    for item in row:
        print(item)



numbers = [2, 2, 4, 6, 3, 4, 6, 1]
unique = []
for number in numbers:
    if number not in unique:
        unique.append(number)

print(unique)



phone = input('Phone: ')
digits_mapping = {
    '1': "One",
    '2' : 'Two',
    '3' : 'Three',
    '4' : 'Four'
}
output = ""
for ch in phone:
    output += digits_mapping.get(ch, "!") + " "
print(output)


message = input('>')
words = message.split(' ')
emoji = {
    ":)": "😁",
    ":(": "😒",
}
output = ''
for word in words:
    output += emoji.get(word, word) + " "

print(output)



def emoji_converter(message):
    words = message.split(' ')
    emoji = {
        ":)": "😁",
        ":(": "😒",
    }
    output = ''
    for word in words:
        output += emoji.get(word, word) + " "
    return output

message = input('>')
result = emoji_converter(message)
print(result)



try:
    age = int(input('Age: '))
    print(age)
except ValueError:
    print('Invalid value')




try:
    age = int(input('Age: '))
    income = 20000
    risk = income/age
    print(risk)
except ZeroDivisionError:
    print('Age cannot be 0.')
except ValueError:
    print('Invalid value')



class Point:
    def move(self):
        print("move")

    def draw(self):
        print('draw')

point1 = Point()
point1.x = 10
point1.y = 20
print(point1.x)
point1.draw()

point2 = Point()
point2.move()


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def move(self):
        print("move")

    def draw(self):
        print('draw')

point1 = Point(10, 20)
print(point1.x)
